-- Script generated by Aqua Data Studio Schema Synchronization for MS SQL Server 2016 on Tue Aug 19 10:43:51 PDT 2025
-- Execute this script on:
-- 		PSP_PIMS_S109_00/dbo - This database/schema will be modified
-- to synchronize it with MS SQL Server 2016:
-- 		PSP_PIMS_S108_00/dbo

-- We recommend backing up the database prior to executing the script.

SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_U_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_U_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR
PRINT N'Drop trigger dbo.PIMS_MGMTAC_I_S_I_TR'
GO
DROP TRIGGER IF EXISTS [dbo].[PIMS_MGMTAC_I_S_I_TR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_FILE
PRINT N'Alter table dbo.PIMS_MANAGEMENT_FILE'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Legacy formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'').   Required due to some files having t' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_MANAGEMENT_FILE', 
	@level2type = N'Column', @level2name = N'LEGACY_FILE_NUM'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY]
	DROP COLUMN IF EXISTS [REQUESTOR_PERSON_ID], [REQUESTOR_ORGANIZATION_ID], [REQUESTOR_PRIMARY_CONTACT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST
PRINT N'Alter table dbo.PIMS_MANAGEMENT_ACTIVITY_HIST'
GO
ALTER TABLE [dbo].[PIMS_MANAGEMENT_ACTIVITY_HIST]
	DROP COLUMN IF EXISTS [REQUESTOR_PERSON_ID], [REQUESTOR_ORGANIZATION_ID], [REQUESTOR_PRIMARY_CONTACT_ID]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_LEASE
PRINT N'Alter table dbo.PIMS_LEASE'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Contact of the MoTI person associated with the lease' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_LEASE', 
	@level2type = N'Column', @level2name = N'MOTI_CONTACT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_ACQUISITION_FILE
PRINT N'Alter table dbo.PIMS_ACQUISITION_FILE'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'Legacy formatted file number assigned to the acquisition file.  Format follows YY-XXXXXX-ZZ where YY = MoTI region number, XXXXXX = generated integer sequence number,  and ZZ = file suffix number (defaulting to ''01'').   Required due to some files having t' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_ACQUISITION_FILE', 
	@level2type = N'Column', @level2name = N'LEGACY_FILE_NUMBER'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Alter table dbo.PIMS_PROPERTY_TENURE_TYPE
PRINT N'Alter table dbo.PIMS_PROPERTY_TENURE_TYPE'
GO
EXEC sp_updateextendedproperty 
	@name = N'MS_Description', @value = N'A code table to store property tenure codes. Tenure is defined as : "The act, right, manner or term of holding something(as a landed property)" In this case, tenure is required on Properties to indicate MoTI''s legal tenure on the property. The land parcel' , 
	@level0type = N'Schema', @level0name = N'dbo', 
	@level1type = N'Table', @level1name = N'PIMS_PROPERTY_TENURE_TYPE'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTAC_I_S_I_TR
PRINT N'Create trigger dbo.PIMS_MGMTAC_I_S_I_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTAC_I_S_I_TR] ON PIMS_MANAGEMENT_ACTIVITY INSTEAD OF INSERT AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM inserted) 
    RETURN;

  
  insert into PIMS_MANAGEMENT_ACTIVITY ("MANAGEMENT_ACTIVITY_ID",
      "MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY")
    select "MANAGEMENT_ACTIVITY_ID",
      "MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID",
      "MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT",
      "COMPLETION_DT",
      "DESCRIPTION",
      "REQUEST_SOURCE",
      "IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER",
      "APP_CREATE_TIMESTAMP",
      "APP_CREATE_USERID",
      "APP_CREATE_USER_GUID",
      "APP_CREATE_USER_DIRECTORY",
      "APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY"
    from inserted;

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

-- Create trigger dbo.PIMS_MGMTAC_I_S_U_TR
PRINT N'Create trigger dbo.PIMS_MGMTAC_I_S_U_TR'
GO
CREATE TRIGGER [dbo].[PIMS_MGMTAC_I_S_U_TR] ON PIMS_MANAGEMENT_ACTIVITY INSTEAD OF UPDATE AS
SET NOCOUNT ON
BEGIN TRY
  IF NOT EXISTS(SELECT * FROM deleted) 
    RETURN;

  -- validate concurrency control
  if exists (select 1 from inserted, deleted where inserted.CONCURRENCY_CONTROL_NUMBER != deleted.CONCURRENCY_CONTROL_NUMBER+1 AND inserted.MANAGEMENT_ACTIVITY_ID = deleted.MANAGEMENT_ACTIVITY_ID)
    raiserror('CONCURRENCY FAILURE.',16,1)


  -- update statement
  update PIMS_MANAGEMENT_ACTIVITY
    set "MANAGEMENT_ACTIVITY_ID" = inserted."MANAGEMENT_ACTIVITY_ID",
      "MGMT_ACTIVITY_STATUS_TYPE_CODE" = inserted."MGMT_ACTIVITY_STATUS_TYPE_CODE",
      "SERVICE_PROVIDER_PERSON_ID" = inserted."SERVICE_PROVIDER_PERSON_ID",
      "SERVICE_PROVIDER_ORG_ID" = inserted."SERVICE_PROVIDER_ORG_ID",
      "MANAGEMENT_FILE_ID" = inserted."MANAGEMENT_FILE_ID",
      "MGMT_ACTIVITY_TYPE_CODE" = inserted."MGMT_ACTIVITY_TYPE_CODE",
      "REQUEST_ADDED_DT" = inserted."REQUEST_ADDED_DT",
      "COMPLETION_DT" = inserted."COMPLETION_DT",
      "DESCRIPTION" = inserted."DESCRIPTION",
      "REQUEST_SOURCE" = inserted."REQUEST_SOURCE",
      "IS_DISABLED" = inserted."IS_DISABLED",
      "CONCURRENCY_CONTROL_NUMBER" = inserted."CONCURRENCY_CONTROL_NUMBER",
      "APP_LAST_UPDATE_TIMESTAMP" = inserted."APP_LAST_UPDATE_TIMESTAMP",
      "APP_LAST_UPDATE_USERID" = inserted."APP_LAST_UPDATE_USERID",
      "APP_LAST_UPDATE_USER_GUID" = inserted."APP_LAST_UPDATE_USER_GUID",
      "APP_LAST_UPDATE_USER_DIRECTORY" = inserted."APP_LAST_UPDATE_USER_DIRECTORY"
    , DB_LAST_UPDATE_TIMESTAMP = getutcdate()
    , DB_LAST_UPDATE_USERID = user_name()
    from PIMS_MANAGEMENT_ACTIVITY
    inner join inserted
    on (PIMS_MANAGEMENT_ACTIVITY.MANAGEMENT_ACTIVITY_ID = inserted.MANAGEMENT_ACTIVITY_ID);

END TRY
BEGIN CATCH
   IF @@trancount > 0 ROLLBACK TRANSACTION
   EXEC pims_error_handling
END CATCH;

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO

COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   PRINT 'The database update failed'
END
GO
